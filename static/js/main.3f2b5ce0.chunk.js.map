{"version":3,"sources":["Header/Header.js","services/users.api.js","modal/CardModal.js","user-card/UserCard.js","user-list/UserList.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","href","users","fetchUsers","a","fetch","res","data","json","CardModal","props","useState","Date","date","currentDate","setCurrentDate","startDate","setStartDate","endDate","setEndData","isDayToday","setIsDayToday","loadCalender","setLoadCalender","renderArray","updateRenderArray","useEffect","todaysDate","str","String","trimedDate","split","setDataArray","inputStartDate","inputEndDate","selectedPeriod","user","activity_periods","filter","p_activityStartDate","p_activityEndDate","p_strDat","start_time","p_endDat","end_time","trimedStrDate","trimedEndDate","Modal","size","aria-labelledby","centered","scrollable","closeButton","Title","id","className","real_name","text","Button","active","onClick","modalText","onChange","strDat","endDat","selectRange","sDate","sEndDate","selectedDate","Body","length","map","index","key","UserCard","showModal","setModalShow","show","onHide","UserList","userDetails","setUserDetails","loading","setLoading","then","result","catch","err","console","error","finally","Spinner","animation","members","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3f2b5ce0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">\r\n        Activity Tracker\r\n        </Navbar.Brand>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;","\r\nconst users = {\r\n    fetchUsers: async () => {\r\n        const res = await fetch('https://fake-rst-api.herokuapp.com/data');\r\n        let data = res.json();\r\n        return data;\r\n    },\r\n};\r\n\r\nexport default users;","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"./CardModal.css\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nfunction CardModal(props) {\r\n  const [date] = useState(new Date());\r\n  const [currentDate, setCurrentDate] = useState('')\r\n  const [startDate, setStartDate] = useState('')\r\n  const [endDate, setEndData] = useState('')\r\n  const [isDayToday, setIsDayToday] = useState(false)\r\n  const [loadCalender, setLoadCalender] = useState(false);\r\n  const [renderArray, updateRenderArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let todaysDate;\r\n    const str = String(date);\r\n    if (str !== \"\") {\r\n      let trimedDate = str.split(\" \");\r\n      todaysDate = trimedDate[1] + \" \" + trimedDate[2] + \" \" + trimedDate[3];\r\n    }\r\n    setCurrentDate(todaysDate)\r\n    setIsDayToday(true)\r\n    setDataArray(todaysDate, todaysDate);\r\n    return () => {\r\n      updateRenderArray([]);   //this will reset the renderArray after the componet unmounts\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);  // this will run only once after render method. this is equivalent as componentDidMount lifecycle\r\n\r\n\r\n\r\n  //this method will be called after start time and end time, both selected on calender\r\n  const onChange = (date) => {\r\n    let strDat = String(date[0]);\r\n    let endDat = String(date[1]);\r\n    let trimedStrDate;\r\n    let trimedEndDate;\r\n    let inputStartDate;\r\n    let inputEndDate;\r\n    if (strDat !== \"\" && endDat !== \"\") {\r\n      trimedStrDate = strDat.split(\" \");\r\n      trimedEndDate = endDat.split(\" \");\r\n      inputStartDate =\r\n        trimedStrDate[1] + \" \" + trimedStrDate[2] + \" \" + trimedStrDate[3];     //formatting the  date to correct format\r\n      inputEndDate =\r\n        trimedEndDate[1] + \" \" + trimedEndDate[2] + \" \" + trimedEndDate[3];     //formatting the  date to correct format\r\n    }\r\n    if (inputStartDate === inputEndDate && inputEndDate === currentDate) {\r\n      setIsDayToday(true)\r\n    }\r\n    else {\r\n      setIsDayToday(false)\r\n    }\r\n    setStartDate(inputStartDate)\r\n    setEndData(inputEndDate)\r\n    setDataArray(new Date(inputStartDate), new Date(inputEndDate));    //this method will update the data for given range \r\n    setLoadCalender(false);                    //hiding calendar after selection\r\n  };\r\n\r\n\r\n  //this method filter the data from given data(api) for selected range\r\n  const setDataArray = (inputStartDate, inputEndDate) => {\r\n    const { activity_periods } = props.user;\r\n    const selectedPeriod = activity_periods.filter((a) => {\r\n      let p_strDat = a.start_time;\r\n      let p_endDat = a.end_time;\r\n      let p_activityStartDate, p_activityEndDate;\r\n      const trimedStrDate = p_strDat.split(\" \");\r\n      const trimedEndDate = p_endDat.split(\" \");\r\n      p_activityStartDate = new Date(trimedStrDate[0] + \" \" + trimedStrDate[1] + \" \" + trimedStrDate[2]);\r\n      p_activityEndDate = new Date(trimedEndDate[0] + \" \" + trimedEndDate[1] + \" \" + trimedEndDate[2]);\r\n      if ( p_activityStartDate >= inputStartDate && p_activityStartDate <= inputEndDate && p_activityEndDate >= inputStartDate && p_activityEndDate <= inputEndDate) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    updateRenderArray(selectedPeriod);\r\n  };\r\n\r\n\r\n  const dataObj = () => {\r\n    if (!renderArray.length) {\r\n      if (isDayToday) {\r\n        return 'No Activity Today'\r\n      } else {\r\n        return 'No Activity'\r\n      }\r\n    }\r\n    return renderArray.map((date, index) => {\r\n      return (\r\n        <div key={index}>\r\n          <div>\r\n            <span className=\"start-time\">Start Time </span>: {date.start_time}\r\n          </div>\r\n          <div>\r\n            <span className=\"end-time\">End Time </span>: {date.end_time}\r\n          </div>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n  const modalText = () => {\r\n    const text = loadCalender ? \"Hide Calender\" : \"Select Range\";\r\n    return (\r\n      <Button\r\n        variant=\"secondary\"\r\n        size=\"sm\"\r\n        active\r\n        onClick={() => setLoadCalender(!loadCalender)}\r\n      >\r\n        {text}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n\r\n  const selectedDate = () => {\r\n    let sDate = isDayToday ? currentDate : startDate;\r\n    let sEndDate = isDayToday ? currentDate : endDate;\r\n    return (\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>Start Date</th>\r\n            <th>End Date</th>\r\n          </tr>\r\n        </tbody>\r\n        <tbody>\r\n\r\n          <tr>\r\n            <td>{sDate}</td>\r\n            <td>{sEndDate}</td>\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable=\"true\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          <div className=\"modal-user-name\">{props.user.real_name}</div>\r\n          {modalText()}\r\n        </Modal.Title>\r\n        {loadCalender ? (\r\n          <Calendar\r\n            id=\"modal-calendar\"\r\n            onChange={onChange}\r\n            selectRange={true}\r\n            closeButton={true}\r\n          />\r\n        ) :\r\n          selectedDate()\r\n        }\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h4>{isDayToday ? `Today's Activity` : 'Activity in Selected Dates'}</h4>\r\n        <div>{dataObj()}</div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CardModal;\r\n","import React from 'react';\r\nimport { useState } from \"react\";\r\nimport CardModal from '../modal/CardModal';\r\nimport './UserCard.css'\r\n\r\nfunction UserCard(props) {\r\n  const [showModal, setModalShow] = useState(false);\r\n  return (<div >\r\n    <div className='user-card' onClick={() => setModalShow(true)}>\r\n      {props.user.real_name}\r\n    </div>\r\n    {showModal ?\r\n      <CardModal\r\n        show={showModal}\r\n        user={props.user}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n      :\r\n      null}\r\n  </div>\r\n\r\n  );\r\n}\r\n\r\nexport default UserCard;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport users from \"../services/users.api\";\r\nimport UserCard from \"../user-card/UserCard\";\r\nimport \"./UserList.css\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nfunction UserList() {\r\n  const [userDetails, setUserDetails] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    const result = users.fetchUsers();\r\n    result.then((result) => {\r\n      setUserDetails(result);\r\n    }).catch(err => {\r\n      console.error(err)\r\n    }).finally(()=>{\r\n      setLoading(false);\r\n    })\r\n  }, []);   //this will run only once\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"user-list-container\">\r\n      <div className=\"user-list-title\">\r\n        <h3>List of Users</h3>\r\n      </div>\r\n      {!loading ? (\r\n       userDetails.members && userDetails.members.map((user, index) => {\r\n          return <UserCard key={index} user={user} />;\r\n        })\r\n      ) : (\r\n          <Spinner animation=\"grow\" />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserList;\r\n","import React from \"react\";\nimport Header from './Header/Header'\nimport UserList from \"./user-list/UserList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <UserList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}